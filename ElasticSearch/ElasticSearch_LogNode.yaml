heat_template_version: 2013-05-23

description: |
  This is a Heat template to deploy a single Linux server running elasticsearch.

parameters:

  server_flavor:
    description: Flavor for Cloud Servers
    type: string

  server_hostname:
    description: Hostname for the server.
    type: string

  key_name:
    description: Nova keypair name for ssh access to the server
    type: string

  private_net_id:
    description: cloud network id for intra-cluster communication
    type: string

  private_subnet_id:
    description: cloud subnet id for intra-cluster communication
    type: string

  public_net_id:
    description: cloud public network id
    type: string

  image_name:
    description: Linux image name
    type: string

  security_group:
    description: Security groups
    type: string

resources:

  es_server:
    type: "OS::Nova::Server"
    properties:
      name:     { get_param: server_hostname }
      flavor:   { get_param: server_flavor }
      image:    { get_param: image_name }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: es_server_port }
     user_data: |
       #!/bin/bash -v
       service iptables stop
       chkconfig iptables off
       yum -y install lvm2 java-1.7.0-openjdk wget ntp
       rpm -ivh https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.2.1.noarch.rpm > /tmp/yum-elasticsearch.log 2>&1
       /sbin/chkconfig --add elasticsearch
       /sbin/chkconfig ntpd on
       service ntpd start
       ## Waiting for EBS mounts to become available
       while [ ! -e /dev/vdb ]; do echo waiting for /dev/vdb to attach; sleep 10; done
       pvcreate /dev/vdb
       vgcreate vg0 /dev/vdb
       lvcreate -l 80%vg -n data vg0
       lvcreate -l 10%vg -n log vg0
       lvcreate -l 10%vg -n journal vg0
       ## Create filesystems and mount point info
       mke2fs -t ext4 -F /dev/vg0/data > /tmp/mke2fs1.log 2>&1
       mke2fs -t ext4 -F /dev/vg0/log > /tmp/mke2fs2.log 2>&1
       mke2fs -t ext4 -F /dev/vg0/journal > /tmp/mke2fs3.log 2>&1
       mkdir /data
       mkdir /log
       mkdir /journal
       echo '/dev/vg0/data /data ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab
       echo '/dev/vg0/log /log ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab
       echo '/dev/vg0/journal /journal ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab
       mount /data > /tmp/mount1.log 2>&1
       mount /log > /tmp/mount2.log 2>&1
       mount /journal > /tmp/mount3.log 2>&1
       ln -s /journal /data/journal
       chown -R elasticsearch:elasticsearch /data > /tmp/chown1.log 2>&1
       chown -R elasticsearch:elasticsearch /log > /tmp/chown2.log 2>&1
       chown -R elasticsearch:elasticsearch /journal > /tmp/chown3.log 2>&1 
       ## Update elasticsearch configuration
       cat <<EOF >> /etc/elasticsearch/elasticsearch.yml
       path.data: /data
       path.work: /journal
       path.log: /log
       node.master: true
       node.data: true
       discovery.zen.minimum_master_nodes: 2
       discovery.zen.ping.multicast.enabled: true
       EOF
       service elasticsearch start > /tmp/elasticsearch-start.log 2>&1
       cd /root
       wget http://download.eclipse.org/jetty/9.2.1.v20140609/dist/jetty-distribution-9.2.1.v20140609.tar.gz
       mkdir -p /opt/jetty
       mkdir -p /opt/web/mybase/webapps
       cd /opt/jetty
       tar xzvf /root/jetty-distribution-9.2.1.v20140609.tar.gz
       echo JETTY_HOME=/opt/jetty/jetty-distribution-9.2.1.v20140609 > /etc/default/jetty
       echo "JETTY_BASE=/opt/web/mybase" >> /etc/default/jetty
       echo "TMPDIR=/opt/jetty/temp" >> /etc/default/jetty
       echo "JETTY_ARGS=jetty.port=80" >> /etc/default/jetty
       cp /opt/jetty/jetty-distribution-9.2.1.v20140609/bin/jetty.sh /etc/init.d/jetty
       /sbin/chkconfig --add jetty
       cd /opt/web/mybase/
       java -jar /opt/jetty/jetty-distribution-9.2.1.v20140609/start.jar --add-to-start=deploy,http,logging
       sed -i 's/^jetty.port.*/jetty.port=80/' /opt/web/mybase/start.ini
       service jetty start

  es_server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net_id }
      fixed_ips:
        - subnet_id: { get_param: private_subnet_id }
      security_groups: [{ get_param: security_group }]

  es_server_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: es_server_port }

  es_server_volume:
    type: OS::Cinder::Volume
    properties:
      name: es_volume
      size: 500
      volume_type: vol-10000iops

  es_server_attach:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: es_server }
      volume_id: { get_resource: es_server_volume }
      mountpoint: /dev/vdb

outputs:

  es_private_ip:
    value: { get_attr: [es_server, first_address] }

  es_port_id:
    value: { get_attr: [es_server_port, device_id] }
